A. Extension for Visual Studio Code: PlatformIO IDE

B. Diagrams in http://fritzing.org
- package with DHT11: Fritzing-Library-master.zip
- package with NodeEmu: esp8266-nodemcu-v3.zip

C. Diagram all_bb.png
Resistor 100 Om for LED
Resistor 10 kOm as pullup for DHT11

D. Template for all angular programs:

---
#include <Arduino.h>

void setup()
{

}

void loop()
{

}
---

1. git branch: 01-led

1.1. Write information to serial port (see https://www.arduino.cc/reference/en/language/functions/communication/serial/)
- configure Serial in setup()
Serial.begin(9600);

- write information 
Serial.print("Temperature: ");
Serial.println(t);

1.2. switch off/on led (see https://www.arduino.cc/reference/en/language/functions/digital-io/digitalwrite/)
- configure output in setup()
pinMode(D1, OUTPUT);

- switch on/off led
digitalWrite(LED_PIN, HIGH);
digitalWrite(LED_PIN, LOW);

- sleep in ms
delay(1000);

2. git branch: 02-dht

2.1. Add DHT library (see https://platformio.org/lib/show/19/DHT%20sensor%20library/installation)
- add libraries to platformio.ini

lib_deps =
    DHT sensor library
    Adafruit Unified Sensor

- we have to add both libraries, because "DHT sensor library" needs "Adafruit Unified Sensor" and platformio per default does not import dependency, see http://docs.platformio.org/en/latest/librarymanager/ldf.html#dependency-finder-mode

2.2. Read temperature and humidity (see https://platformio.org/lib/show/19/DHT%20sensor%20library)

3. git branch: 03-pub

3.1. Add Adafruit IO library (see https://platformio.org/lib/show/714/Adafruit%20IO%20Arduino/installation)
- add libraries to platformio.ini

lib_deps =
    Adafruit IO Arduino
    Adafruit MQTT Library
    ArduinoHttpClient
    ESP8266WiFi

3.2. Create account at https://io.adafruit.com

3.3. Prepare AIO Key (user, key) for your account

3.4. Get WiFi SSID and password

3.5. Publish data

- configure AdafruitIO_WiFi (once in application)

AdafruitIO_WiFi io(IO_USERNAME, IO_KEY, WIFI_SSID, WIFI_PASS);

- configure feed (once in application)

AdafruitIO_Feed *feed = io.feed(FEED);

- connect to Adafruit IO in setup()

io.connect();

- handle Adafruit IO communication in loop()

io.run();

- publish

feed->save(temperature);

4. git branch: 04-sub

- register handler in setup()

feed->onMessage(handler);

- implement handler

void handler(AdafruitIO_Data *data)
{
  Serial.print("Received data: ");
  Serial.println(data->value());
}
